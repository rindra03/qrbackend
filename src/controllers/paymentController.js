import { PaymentVerificationService } from '../services/PaymentVerificationService.js';

export class PaymentController {

  /**
   * V√©rifier l'√©ligibilit√© d'un √©tudiant (sans le valider)
   */
  static async checkEligibility(req, res) {
    const { idetu } = req.body;

    if (!idetu) {
      return res.status(400).json({
        success: false,
        message: "ID √©tudiant requis",
        error: "Param√®tre manquant"
      });
    }

    try {
      const result = await PaymentVerificationService.checkStudentEligibility(idetu);
      
      // Affichage console d√©taill√©
      if (result.success) {
        console.log(`üéØ √âLIGIBILIT√â - ${result.data.nom} ${result.data.prenom} (${idetu}): √âLIGIBLE`);
        console.log(`   üí∞ Montant: ${result.data.montant} Ar`);
        console.log(`   ‚úÖ Statut: Non valid√© (peut √™tre valid√©)`);
      } else {
        console.log(`üö´ √âLIGIBILIT√â - ID ${idetu}: NON √âLIGIBLE`);
        console.log(`   ‚ùå Raison: ${result.message}`);
      }

      const statusCode = result.success ? 200 : 400;
      res.status(statusCode).json(result);

    } catch (error) {
      console.error("üö® Erreur v√©rification √©ligibilit√©:", error);
      res.status(500).json({
        success: false,
        message: "Erreur serveur lors de la v√©rification",
        error: error.message
      });
    }
  }

  /**
   * Valider un √©tudiant (scanner et validation)
   */
  static async validateStudent(req, res) {
    const { idetu } = req.body;

    if (!idetu) {
      return res.status(400).json({
        success: false,
        message: "ID √©tudiant requis",
        error: "Param√®tre manquant"
      });
    }

    try {
      const result = await PaymentVerificationService.validateStudent(idetu);
      
      // Affichage console d√©taill√©
      if (result.success) {
        console.log(`üèÜ VALIDATION R√âUSSIE - ${result.data.nom} ${result.data.prenom} (${idetu})`);
        console.log(`   üí∞ Montant: ${result.data.montant} Ar`);
        console.log(`   ‚úÖ Statut: VALID√â`);
        console.log(`   üìÖ Valid√© le: ${result.data.validatedAt}`);
      } else {
        console.log(`‚ùå VALIDATION √âCHOU√âE - ID ${idetu}: ${result.message}`);
      }

      const statusCode = result.success ? 200 : 400;
      res.status(statusCode).json(result);

    } catch (error) {
      console.error("üö® Erreur validation √©tudiant:", error);
      res.status(500).json({
        success: false,
        message: "Erreur serveur lors de la validation",
        error: error.message
      });
    }
  }

  /**
   * Obtenir le statut d'un √©tudiant
   */
  static async getStudentStatus(req, res) {
    const { idetu } = req.params;

    if (!idetu) {
      return res.status(400).json({
        success: false,
        message: "ID √©tudiant requis",
        error: "Param√®tre manquant"
      });
    }

    try {
      const result = await PaymentVerificationService.getStudentStatus(idetu);
      
      // Affichage console
      if (result.success) {
        const student = result.data;
        console.log(`üìä STATUT - ${student.nom} ${student.prenom} (${idetu})`);
        console.log(`   üí∞ Montant: ${student.montant} Ar`);
        console.log(`   ‚úÖ Valid√©: ${student.isValidated ? 'OUI' : 'NON'}`);
        console.log(`   üéØ Peut √™tre valid√©: ${student.canBeValidated ? 'OUI' : 'NON'}`);
        if (student.validatedAt) {
          console.log(`   üìÖ Valid√© le: ${student.validatedAt}`);
        }
      }

      const statusCode = result.success ? 200 : 404;
      res.status(statusCode).json(result);

    } catch (error) {
      console.error("üö® Erreur r√©cup√©ration statut:", error);
      res.status(500).json({
        success: false,
        message: "Erreur serveur lors de la r√©cup√©ration du statut",
        error: error.message
      });
    }
  }

  /**
   * Obtenir la liste des √©tudiants valid√©s
   */
  static async getValidatedStudents(req, res) {
    const { limit = 50, offset = 0 } = req.query;

    try {
      const result = await PaymentVerificationService.getValidatedStudents(limit, offset);
      
      // Affichage console
      console.log(`üìã √âTUDIANTS VALID√âS - Total: ${result.data.total}, Affich√©s: ${result.data.students.length}`);
      
      if (result.data.students.length > 0) {
        console.table(result.data.students.map(s => ({
          ID: s.idetu,
          Nom: s.nom,
          Pr√©nom: s.prenom,
          Montant: `${s.montant} Ar`,
          Valid√©Le: s.validated_at ? new Date(s.validated_at).toLocaleDateString() : '-'
        })));
      }

      res.status(200).json(result);

    } catch (error) {
      console.error("üö® Erreur r√©cup√©ration √©tudiants valid√©s:", error);
      res.status(500).json({
        success: false,
        message: "Erreur serveur lors de la r√©cup√©ration des √©tudiants valid√©s",
        error: error.message
      });
    }
  }

  /**
   * Route legacy pour compatibilit√©
   */
  static async verifyPaymentLegacy(req, res) {
    const { idetu } = req.body;

    try {
      const result = await PaymentVerificationService.checkStudentEligibility(idetu);
      
      if (result.success) {
        res.status(200).json({
          message: "Paiement v√©rifi√©",
          nom: result.data.nom,
          prenom: result.data.prenom,
          montant: result.data.montant,
        });
      } else {
        res.status(404).json({ 
          message: result.message 
        });
      }

    } catch (error) {
      res.status(500).json({ 
        message: "Erreur serveur", 
        error: error.message 
      });
    }
  }
}